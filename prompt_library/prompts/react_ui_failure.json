{
  "name": "react_ui_failure",
  "description": "React Ui Failure Prompts",
  "prompts": {
    "1": "Your role involves investigating React component rendering issues. A UI element is not displaying as expected in our application. Begin with a systematic review of the component's props, state, and render cycle. Check the browser console for warnings and error messages. Take time to methodically inspect the component hierarchy and parent-child relationships.\n\nSpecific steps to follow:\n1. Examine component's JSX structure and render method\n2. Verify all required props are being passed correctly\n3. Check state initialization and update patterns\n4. Review useEffect dependencies and cleanup functions\n5. Inspect CSS styles and media queries\n6. Test component with different prop combinations\n7. Document any console warnings or errors\n8. Validate data flow from parent components\n\nUse React Developer Tools to observe component behavior in isolation. Consider implementing error boundaries if not present. Document your findings for future reference.",
    "2": "You are tasked with debugging a React component loading failure that's affecting user interaction. The component's behavior suggests potential rendering issues that require careful investigation. Begin by examining component lifecycle methods, verify data flow patterns, and inspect network requests that might impact rendering.\n\nRequired investigation steps:\n1. Use React DevTools to trace component updates and re-renders\n2. Analyze the component's mounting/unmounting behavior\n3. Check for memory leaks using Performance profiler\n4. Verify API calls and data fetching patterns\n5. Examine error boundary implementations\n6. Test component in isolation using Storybook\n7. Review state management implementation\n8. Check for race conditions in async operations\n9. Validate event handler bindings\n10. Assess impact on related components\n\nDocument all findings and create a reproducible test case. Consider implementing performance monitoring if not present. Establish baseline performance metrics for future comparison.",
    "3": "Your expertise is needed to diagnose complex React UI rendering anomalies affecting our application. Component tree inspection shows potential reconciliation issues that need thorough investigation. Begin systematic debugging using React profiler, browser DevTools, and state management tracking tools.\n\nCritical investigation areas:\n1. Analyze React reconciliation patterns using Profiler\n2. Document component mount/unmount patterns\n3. Review Context API implementation if present\n4. Check for unnecessary re-renders using memo\n5. Validate custom hooks implementation\n6. Examine bundle size and code splitting\n7. Review lazy loading implementation\n8. Test component with React.Strict mode\n9. Analyze render prop patterns\n10. Check HOC implementations\n11. Verify CSS-in-JS performance impact\n12. Document component tree structure\n\nCreate detailed performance metrics and establish monitoring baselines. Consider implementing automated testing for critical render paths.",
    "4": "A React component failure requires prompt attention as it's affecting multiple UI elements. Several components show signs of render inefficiency and potential memory leaks. Conduct thorough analysis of the virtual DOM updates, prop drilling patterns, and component re-renders.\n\nUrgent investigation required for:\n1. Memory allocation patterns in component lifecycle\n2. Performance bottlenecks in render methods\n3. State mutation patterns and side effects\n4. Component tree depth and complexity\n5. Redux/Context state updates\n6. Network waterfall effects\n7. Asset loading patterns\n8. Browser rendering pipeline\n9. JavaScript heap usage\n10. DOM mutation frequency\n11. Event handler optimization\n12. React Suspense boundaries\n13. Error recovery mechanisms\n14. Cache implementation review\n\nEstablish real-time monitoring for affected components. Document performance patterns and create immediate optimization strategies.",
    "5": "React application stability is showing concerning render patterns that could cascade through the entire component tree. These UI issues require immediate comprehensive investigation to prevent application-wide performance degradation.\n\nCritical investigation points:\n1. Implement comprehensive component debugging\n2. Profile memory usage patterns\n3. Track render frequency and duration\n4. Analyze hook dependency chains\n5. Review state management architecture\n6. Examine code splitting effectiveness\n7. Validate data fetching strategies\n8. Check component composition patterns\n9. Review error handling implementation\n10. Analyze bundle size impact\n11. Test SSR implementation if present\n12. Review routing implementation\n13. Check React.memo usage\n14. Analyze Context API usage\n15. Document performance metrics\n\nTime is becoming critical - establish component tree issues within the next sprint. Set up continuous monitoring and create immediate action items.",
    "6": "**URGENT**: Multiple React components are failing to render properly, causing significant user experience degradation. This situation requires immediate analysis and intervention to prevent complete UI breakdown.\n\nImmediate actions required:\n1. Deploy React profiling tools for real-time analysis\n2. Begin parallel investigation of affected component trees\n3. Analyze render cascades and performance impacts\n4. Review state management implementation\n5. Check for memory leaks and cleanup issues\n6. Examine network request patterns\n7. Validate data flow architecture\n8. Review error boundary implementation\n9. Check bundle splitting configuration\n10. Analyze code splitting effectiveness\n11. Review lazy loading patterns\n12. Check service worker implementation\n13. Validate caching strategies\n14. Review build optimization settings\n15. Document all component dependencies\n\nEscalate findings to senior frontend developers immediately. User experience is degrading rapidly - establish hourly checkpoints for progress updates.",
    "7": "**HIGH PRIORITY ALERT**: Critical React component failures detected across core UI features. Application stability is severely compromised. Immediate investigation required to prevent cascade rendering issues.\n\nEmergency response required:\n1. Initiate emergency debugging protocols\n2. Enable real-time component monitoring\n3. Review all critical render paths\n4. Check state management systems\n5. Analyze network request patterns\n6. Review build configuration\n7. Check deployment pipeline\n8. Validate CDN configuration\n9. Review cache implementation\n10. Check load balancer settings\n11. Analyze database query impact\n12. Review API endpoint performance\n13. Check authentication flows\n14. Validate WebSocket connections\n15. Review third-party integrations\n\nMobilize frontend team resources immediately. Updates required every hour. User interaction severely impacted - establish war room for coordinated response.",
    "8": "**SEVERE UI ALERT**: Major React application degradation detected. Multiple critical components showing render failures. Application stability at severe risk.\n\nEmergency protocols activated:\n1. Implement emergency debugging procedures\n2. Take component tree snapshots every 30 minutes\n3. Review all state mutations\n4. Check memory allocation patterns\n5. Analyze garbage collection cycles\n6. Review event loop blocking\n7. Check DOM mutation frequency\n8. Analyze React fiber tree\n9. Review reconciliation patterns\n10. Check hydration issues\n11. Validate SSR implementation\n12. Review code splitting config\n13. Check bundle optimization\n14. Analyze tree shaking effectiveness\n15. Review dependency graph\n\nAll other frontend tasks postponed. Immediate comprehensive analysis required. Establish direct line with infrastructure team.",
    "9": "**CRITICAL EMERGENCY**: Severe React application-wide failures occurring. Core UI components experiencing fatal render crashes. Total UI collapse imminent without immediate intervention.\n\nIMMEDIATE ACTIONS REQUIRED:\n1. Execute emergency frontend protocols\n2. Enable full crash reporting\n3. Review all error boundaries\n4. Check memory consumption\n5. Analyze CPU utilization\n6. Review network saturation\n7. Check disk I/O patterns\n8. Validate DNS resolution\n9. Review SSL certificate status\n10. Check CDN availability\n11. Review cache hit rates\n12. Analyze database connections\n13. Check API response times\n14. Review load balancer health\n15. Validate backup systems\n\nFull development team engagement required. Continuous monitoring mandatory. URGENT action required to maintain basic functionality. Establish backup communication channels.",
    "10": "**CATASTROPHIC UI FAILURE IMMINENT**: Complete React application collapse predicted within hours. Critical component infrastructure showing terminal render failures. System-wide breakdown in progress.\n\nEMERGENCY RESPONSE PROTOCOL:\n1. Deploy ALL available frontend resources\n2. Enable maximum debugging output\n3. Review system architecture\n4. Check infrastructure stability\n5. Analyze data center status\n6. Review disaster recovery\n7. Check backup systems\n8. Validate failover systems\n9. Review emergency procedures\n10. Check business continuity\n11. Analyze impact assessment\n12. Review incident response\n13. Check security protocols\n14. Validate data integrity\n15. Review system redundancy\n\nMaximum urgency protocols in effect. Minute-by-minute status updates required. IMMEDIATE action critical to prevent total application loss. Initialize emergency response team."
  },
  "metadata": {
    "author": "Prometheus AI",
    "version": "1.0.0",
    "created": "2025-03-09",
    "tags": [
      "ai",
      "prompt",
      "react_ui_failure"
    ]
  }
}